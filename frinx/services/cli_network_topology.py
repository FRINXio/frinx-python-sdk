import json

import requests

from frinx.common.frinx_rest import CLI_EXECUTE_AND_READ_URL
from frinx.common.frinx_rest import CLI_EXECUTE_URL
from frinx.common.frinx_rest import UNICONFIG_HEADERS
from frinx.common.frinx_rest import UNICONFIG_URL_BASE


def execute_and_read(
    node_id: str,
    command: str,
    transaction_id: str,
    wait_for_output: int = 0,
    uniconfig_url_base: str | None = None
) -> requests.Response:
    """
    Execute command and read output.
    https://docs.frinx.io/frinx-uniconfig/user-guide/network-management-protocols/uniconfig_cli/#rpc-execute-and-read
    Args:
        node_id: Target node.
        command: Command to be executed.
        transaction_id: Transaction ID generated by Uniconfig.
        wait_for_output: Execute next command after n seconds after previous one.
        uniconfig_url_base: Override default Uniconfig url.

    Returns:
        Http response.
    """
    base_url = UNICONFIG_URL_BASE
    if uniconfig_url_base is not None:
        base_url = uniconfig_url_base

    url = base_url + CLI_EXECUTE_AND_READ_URL.format(node_id)
    response = requests.post(
        url,
        data=json.dumps(
            {
                'input': {
                    'command': command,
                    'wait_for_output': wait_for_output
                }
            }
        ),
        cookies={'UNICONFIGTXID': transaction_id},
        headers=UNICONFIG_HEADERS
    )

    response.raise_for_status()
    return response


def execute(
    node_id: str,
    command: str,
    transaction_id: str,
    uniconfig_url_base: str | None = None
) -> requests.Response:
    """
    Execute command.
    https://docs.frinx.io/frinx-uniconfig/user-guide/network-management-protocols/uniconfig_cli/#rpc-execute
    Args:
        node_id: Target node.
        command: Command to be executed.
        transaction_id: Transaction ID generated by Uniconfig.
        uniconfig_url_base: Override default Uniconfig url.

    Returns:
        Http response.
    """
    base_url = UNICONFIG_URL_BASE
    if uniconfig_url_base is not None:
        base_url = uniconfig_url_base

    url = base_url + CLI_EXECUTE_URL.format(node_id)
    response = requests.post(
        url,
        data=json.dumps(
            {
                'input': {
                    'command': command
                }
            }
        ),
        cookies={'UNICONFIGTXID': transaction_id},
        headers=UNICONFIG_HEADERS
    )

    response.raise_for_status()
    return response
